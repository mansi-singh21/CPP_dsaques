#include <iostream>

using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};

class LinkedList {
public:
    Node* head;

    LinkedList() : head(nullptr) {}

    void insert(int val) {
        Node* newNode = new Node(val);
        
        // If the list is empty or the new node should be the new head
        if (!head || head->data >= val) {
            newNode->next = head;
            head = newNode;
            return;
        }

        // Traverse to find the correct position
        Node* current = head;
        while (current->next && current->next->data < val) {
            current = current->next;
        }

        // Insert the new node
        newNode->next = current->next;  // Link the new node to the next node
        current->next = newNode;         // Link the current node to the new node
    }

    void display() {
        Node* current = head;
        while (current) {
            cout << current->data;
            if (current->next) {
                cout << "->";
            }
            current = current->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;
    int n, value;

    cout << "Enter the number of elements in the linked list: ";
    cin >> n;

    cout << "Enter sorted elements (space-separated): ";
    for (int i = 0; i < n; ++i) {
        int val;
        cin >> val;
        list.insert(val);
    }

    cout << "Enter the value to insert: ";
    cin >> value;

    list.insert(value);
    
    cout << "Updated linked list: ";
    list.display();

    return 0;
}
